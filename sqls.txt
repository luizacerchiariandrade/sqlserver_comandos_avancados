SELECT * FROM TABELA_DE_PRODUTOS WHERE NOT SABOR = 'Manga' AND TAMANHO = '470 ml';
SELECT * FROM TABELA_DE_PRODUTOS WHERE NOT (SABOR = 'Manga' AND TAMANHO='470 ml');
SELECT * FROM TABELA_DE_PRODUTOS WHERE NOT (SABOR = 'Manga' OR TAMANHO='470 ml');
SELECT * FROM TABELA_DE_PRODUTOS WHERE 
SABOR = 'Manga' OR SABOR = 'Laranja' OR SABOR = 'Melancia';

or
SELECT * FROM TABELA_DE_PRODUTOS WHERE 
SABOR in ('Manga', 'Laranja', 'Melancia');

SELECT * FROM TABELA_DE_PRODUTOS WHERE 
SABOR in ('Manga', 'Laranja', 'Melancia') AND TAMANHO = '1 Litro';

SELECT * FROM TABELA_DE_CLIENTES WHERE 
CIDADE in ('Rio de Janeiro', 'Sao Paulo');

SELECT * FROM TABELA_DE_CLIENTES WHERE 
CIDADE in ('Rio de Janeiro', 'Sao Paulo') AND (IDADE >= 20 AND IDADE <= 25);

SELECT * FROM TABELA_DE_CLIENTES WHERE 
CIDADE in ('Rio de Janeiro', Sao Paulo') AND (IDADE BETWEEN 20 AND 25);

SELECT DISTINCT EMBALAGEM FROM TABELA_DE_PRODUTOS WHERE SABOR = 'Maca';

select cidade, sum(idade) as idade from tabela_de_clientes group by cidade, idade;

select * from tabela_de_clientes order by cidade, idade;

SELECT CIDADE, SUM(IDADE) AS IDADE, SUM(LIMITE_DE_CREDITO) AS CREDITO 
FROM TABELA_DE_CLIENTES GROUP BY CIDADE

SELECT CIDADE, AVG(IDADE) AS IDADE, SUM(LIMITE_DE_CREDITO) FROM TABELA_DE_CLIENTES GROUP BY CIDADE

SELECT ESTADO, SUM(LIMITE_DE_CREDITO) AS CREDITO 
FROM TABELA_DE_CLIENTES GROUP BY ESTADO 
HAVING SUM(LIMITE_DE_CREDITO) >= 900000;

SELECT EMBALAGEM, MAX(PRECO_DE_LISTA) AS PRECO_MAX, MIN(PRECO_DE_LISTA) AS PRECO_MIN 
FROM TABELA_DE_PRODUTOS GROUP BY EMBALAGEM;

https://www.tutorialspoint.com/sql/sql-having-clause.htm
SELECT NOME_DO_PRODUTO, PRECO_DE_LISTA,
(CASE WHEN PRECO_DE_LISTA >12 THEN 'PRODUTO CARO' 
      WHEN PRECO_DE_LISTA >= 7 AND PRECO_DE_LISTA < 12 THEN 'PRODUTO EM CONTA' 
      ELSE 'PRODUTO BARATO' END) AS CLASSIFICACAO 
FROM TABELA_DE_PRODUTOS 
WHERE SABOR = 'Manga'
ORDER BY CLASSIFICACAO;

SELECT 
(CASE WHEN PRECO_DE_LISTA >12 THEN 'PRODUTO CARO' 
      WHEN PRECO_DE_LISTA >= 7 AND PRECO_DE_LISTA < 12 THEN 'PRODUTO EM CONTA' 
      ELSE 'PRODUTO BARATO' END) AS CLASSIFICACAO, COUNT(*) AS NUMERO_DE_PRODUTOS 
FROM TABELA_DE_PRODUTOS 
GROUP BY (CASE WHEN PRECO_DE_LISTA >12 THEN 'PRODUTO CARO' 
      WHEN PRECO_DE_LISTA >= 7 AND PRECO_DE_LISTA < 12 THEN 'PRODUTO EM CONTA' 
      ELSE 'PRODUTO BARATO' END);

SELECT MEDIA_EMBALAGENS.EMBALAGEM, MEDIA_EMBALAGENS.PRECO_MEDIO FROM (
    SELECT EMBALAGEM, AVG(PRECO_DE_LISTA) AS PRECO_MEDIO 
    FROM TABELA_DE_PRODUTOS 
    GROUP BY EMBALAGEM
) MEDIA_EMBALAGENS 
WHERE MEDIA_EMBALAGENS.PRECO_MEDIO <= 10;

select tb_amediadeembalagens.embalagem,
       tb_amediadeembalagens.preco_medio
from (
select embalagem, AVG(preco_de_lista) as preco_medio 
from tabela_de_produtos
group by embalagem)tb_amediadeembalagens
where tb_amediadeembalagens.preco_medio <=10

select embalagem, AVG(preco_de_lista) as preco_medio 
from tabela_de_produtos
group by embalagem


create view media_embalagens as
select embalagem, AVG(preco_de_lista) as preco_medio 
	from tabela_de_produtos
group by embalagem

select embalagem, preco_medio from
media_embalagens
where preco_medio < 10

SELECT 
NOME, 
CHARINDEX(' ', NOME, 1) 
FROM TABELA_DE_CLIENTES;

SELECT NOME, SUBSTRING(NOME, 1, CHARINDEX(' ', NOME, 1))
FROM TABELA_DE_CLIENTES;

SELECT NOME, LOWER(NOME) AS NOME_MINUSCULO 
FROM TABELA_DE_CLIENTES;

SELECT NOME, LOWER(NOME) AS NOME_MINUSCULO, UPPER(NOME) AS NOME_MAIUSCULO 
FROM TABELA_DE_CLIENTES;

SELECT NOME, CONCAT(ENDERECO_1, ' ', BAIRRO, ' ', CIDADE, ' ', ESTADO, ' - ', CEP) AS ENDERECO_COMPLETO 
FROM TABELA_DE_CLIENTES;

SELECT NOME, ENDERECO_1 + ' ' + BAIRRO + ' ' + CIDADE + ' ' + ESTADO + ' - ' + CEP) AS ENDERECO_COMPLETO 
FROM TABELA_DE_CLIENTES`;

SELECT NOME_DO_PRODUTO, LEFT(NOME_DO_PRODUTO, 3) AS TRES_PRIMEIROS_CHAR 
FROM TABELA_DE_PRODUTOS;

SELECT TAMANHO, REPLACE(TAMANHO, 'Litros', 'L') AS TAMANHO_MODIFICADO 
FROM TABELA_DE_PRODUTOS;

SELECT TAMANHO, REPLACE((REPLACE(TAMANHO, 'Litros', 'L')), 'Litro', 'L') AS TAMANHO_MODIFICADO 
FROM TABELA_DE_PRODUTOS;

DATEDIFF(DAY, '2022-01-01', '2022-04-12')

DATEADD(DAY, 30, '2022-01-01')

ISDATE('2022-02-31')
DATETIMEFROMPARTS(2022, 12, 14, 15, 34, 22, 30)


SELECT GETDATE();


SELECT DATEADD(DAY, 10, GETDATE());

SELECT GETDATE() AS DATA_HOJE, DATEADD(DAY, 10, GETDATE()) AS DATA_DAQUI_10_ DIAS;

SELECT DATEADD(DAY,-48, GETDATE()) AS DATA_48_DIAS_ATRAS

SELECT DATEPART(DAY, GETDATE()) AS DIA_DE_HOJE;

SELECT ISDATE(DATETIMEFROMPARTS(2022, 02, 28, 00, 00, 00, 00));

DATEPART(DAY, '2022-01-01')

SELECT NOME + ' nasceu em ' + 
DATENAME (WEEKDAY,DATA_DE_NASCIMENTO) + ',' +
DATENAME (DAY,DATA_DE_NASCIMENTO) + ' de ' +
DATENAME(MONTH, DATA_DE_NASCIMENTO) + ' de ' +
DATENAME(YEAR, DATA_DE_NASCIMENTO) AS DATA_EXTENSO
FROM TABELA_DE_CLIENTES;

select round(33.433,2),
SELECT FLOOR(3.433);
SELECT POWER(12, 2);
SELECT EXP(3);
SELECT SQRT(300);
SELECT ABS(10), ABS(-10);

SELECT DATA_DE_NASCIMENTO, CONVERT(VARCHAR(25), DATA_DE_NASCIMENTO, 101) 
FROM TABELA_DE_CLIENTES;

SELECT NOME_DO_PRODUTO, CONCAT('O preço de lista é: ', PRECO_DE_LISTA) AS PRECO 
FROM TABELA_DE_PRODUTOS;

SELECT NOME_DO_PRODUTO, 
CONCAT('O preço de lista é: ', 
CAST(PRECO_DE_LISTA AS VARCHAR(10))) 
AS PRECO 
FROM TABELA_DE_PRODUTOS;

SELECT 'O cliente ' + TC.NOME + ' comprou R$ ' + 
TRIM(STR(SUM(INF.QUANTIDADE * INF.PRECO) ,10,2)) + ' no ano de ' + DATENAME(YEAR, NF.DATA_VENDA)
FROM NOTAS_FISCAIS NF
INNER JOIN ITENS_NOTAS_FISCAIS INF ON NF.NUMERO = INF.NUMERO
INNER JOIN TABELA_DE_CLIENTES TC ON NF.CPF = TC.CPF
WHERE YEAR(NF.DATA_VENDA) = '2016'
GROUP BY TC.NOME, NF.DATA_VENDA;

SELECT 
FROM TABELA_DE_CLIENTES TC 
INNER JOIN (
    SELECT NF.CPF, 
    CONVERT(VARCHAR(7), NF.DATA_VENDA, 120) AS MES_ANO, 
    SUM(INF.QUANTIDADE) AS QUANTIDADE_TOTAL 
    FROM NOTAS_FISCAIS NF 
    INNER JOIN ITENS_NOTAS_FISCAIS INF 
    ON NF.NUMERO = INF.NUMERO 
    GROUP BY NF.CPF, CONVERT(VARCHAR(7), NF.DATA_VENDA, 120)
) TV
ON TV.CPF = TC.CPF;

SELECT
VS.TAMANHO, VS.ANO, VS.VENDA_ANO,
ROUND((CONVERT( FLOAT, VS.VENDA_ANO) / CONVERT( FLOAT, VA.VENDA_TOTAL_ANO)) * 100, 2) AS PERCENTUAL
FROM 
(
SELECT
TP.TAMANHO
,YEAR(NF.DATA_VENDA) AS ANO
,SUM(INF.QUANTIDADE) AS VENDA_ANO
FROM TABELA_DE_PRODUTOS TP
INNER JOIN ITENS_NOTAS_FISCAIS INF
ON TP.CODIGO_DO_PRODUTO = INF.CODIGO_DO_PRODUTO
INNER JOIN NOTAS_FISCAIS NF
ON INF.NUMERO = NF.NUMERO
WHERE YEAR(NF.DATA_VENDA) = 2016
GROUP BY TP.TAMANHO, YEAR(NF.DATA_VENDA)
) VS
INNER JOIN
(
SELECT 
YEAR(NF.DATA_VENDA) AS ANO
, SUM(INF.QUANTIDADE) AS VENDA_TOTAL_ANO
FROM NOTAS_FISCAIS NF
INNER JOIN ITENS_NOTAS_FISCAIS INF
ON NF.NUMERO = INF.NUMERO
WHERE YEAR(NF.DATA_VENDA) = 2016
GROUP BY YEAR(NF.DATA_VENDA)
) VA
ON VS.ANO = VA.ANO
ORDER BY VS.VENDA_ANO DESC;

SELECT SUM(INF.QUANTIDADE * INF.[PRECO]) AS FATURAMENTO
FROM [ITENS_NOTAS_FISCAIS] INF
INNER JOIN [NOTAS_FISCAIS] NF
ON INF.NUMERO = NF.NUMERO
INNER JOIN [TABELA_DE_CLIENTES] TC
ON TC.CPF = NF.CPF
WHERE TC.BAIRRO = 'Jardins'



DECLARE @nome VARCHAR(50)
DECLARE funcionario_cursor CURSOR FOR
    SELECT nome
    FROM TABELA_DE_CLIENTES

OPEN funcionario_cursor

FETCH NEXT FROM funcionario_cursor INTO @nome

WHILE @@FETCH_STATUS = 0
BEGIN
    PRINT 'Nome: ' + @nome
    FETCH NEXT FROM funcionario_cursor INTO @nome
END


declare @NOME VARCHAR(200)
DECLARE @ENDERECO VARCHAR(MAX)

DECLARE CURSOR1 CURSOR FOR
SELECT NOME, ([ENDERECO_1] + ' ' + BAIRRO + ' ' + CIDADE + ' ' + ESTADO + 
+ ' CEP: ' + CEP) ENDCOMPLETO
FROM [TABELA_DE_CLIENTES]
OPEN CURSOR1
FETCH NEXT FROM CURSOR1 INTO @NOME, @ENDERECO
WHILE @@FETCH_STATUS = 0
BEGIN 
PRINT 'NOME' + @NOME + 
'ENDERECO' + @ENDERECO
END
CLOSE CURSOR1

DECLARE @LIMITE_MINIMO INT, @LIMITE_MAXIMO INT
DECLARE @TABELA_NUMEROS TABLE ([NUMERO] INT, [STATUS] VARCHAR(200))
DECLARE @CONTADOR_NOTAS 

SET @LIMITE_MINIMO = 1
SET @LIMITE_MAXIMO = 1000000

SET NOCOUNT ON
WHILE @LIMITE_MINIMO <= @LIMITE_MAXIMO
BEGIN
    SELECT @CONTADOR_NOTAS = COUNT(*) FROM [dbo].[NOTAS FISCAIS] WHERE NUMERO = @LIMITE_MINIMO
    IF @CONTADOR_NOTAS > 0
        BEGIN
            INSERT INTO @TABELA_NUMEROS (NUMERO, STATUS) VALUES (@LIMITE_MINIMO, 'É NOTA FISCAL')
        END
    ELSE
        BEGIN
            INSERT INTO @TABELA_NUMEROS (NUMERO, STATUS) VALUES (@LIMITE_MINIMO, 'NÃO É NOTA FISCAL')
        END
    SET @LIMITE_MINIMO = LIMITE_MINIMO + 1
END
SELECT * FROM @TABELA_NUMEROS ORDER BY NUMERO
DEALLOCATE CURSOR1